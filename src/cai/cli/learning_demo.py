"""
Demonstra√ß√£o Completa do Sistema de Aprendizado Cont√≠nuo

Este script demonstra como configurar e usar todas as funcionalidades
do sistema de aprendizado cont√≠nuo do CAI.
"""

import asyncio
import os
from rich.console import Console
from rich.panel import Panel
from rich.text import Text
from rich.table import Table


async def main():
    """Demonstra√ß√£o completa do sistema de aprendizado."""
    console = Console()

    console.print(Panel.fit(
        "[bold blue]üß† Sistema de Aprendizado Cont√≠nuo do CAI[/bold blue]\n"
        "[dim]Demonstra√ß√£o completa das funcionalidades[/dim]",
        border_style="blue"
    ))

    # 1. Configura√ß√£o Inicial
    console.print("\n[bold green]1. Configura√ß√£o Inicial[/bold green]")

    try:
        from cai.cli.learning_config import setup_learning_environment, get_learning_config
        from cai.cli.learning_integration import initialize_learning_integration

        # Setup do ambiente
        success = setup_learning_environment()
        if success:
            console.print("‚úÖ Ambiente de aprendizado configurado")

            # Inicializar integra√ß√£o
            await initialize_learning_integration()
            console.print("‚úÖ Sistema de integra√ß√£o inicializado")

        # Mostrar configura√ß√£o atual
        config = get_learning_config()
        console.print(f"üìä Configura√ß√£o: {config}")

    except Exception as e:
        console.print(f"‚ùå Erro na configura√ß√£o: {e}")
        return

    # 2. Demonstra√ß√£o de Componentes
    console.print("\n[bold green]2. Demonstra√ß√£o de Componentes[/bold green]")

    try:
        from cai.cli.continuous_learning import get_learning_engine
        from cai.cli.learning_integration import get_learning_integration
        from cai.cli.enhanced_agent_runner import EnhancedAgentRunner

        # Obter inst√¢ncias dos componentes
        engine = get_learning_engine()
        integration = get_learning_integration()
        runner = EnhancedAgentRunner(console)

        console.print("‚úÖ Componentes inicializados:")
        console.print(f"   ‚Ä¢ Engine: {len(engine.learning_patterns)} padr√µes")
        console.print(f"   ‚Ä¢ Integra√ß√£o: {'habilitada' if integration.learning_enabled else 'desabilitada'}")
        console.print(f"   ‚Ä¢ Runner: aprendizado {'habilitado' if runner.learning_enabled else 'desabilitado'}")

    except Exception as e:
        console.print(f"‚ùå Erro nos componentes: {e}")
        return

    # 3. Simula√ß√£o de Intera√ß√µes de Aprendizado
    console.print("\n[bold green]3. Simula√ß√£o de Intera√ß√µes[/bold green]")

    # Simular algumas intera√ß√µes de aprendizado
    sample_interactions = [
        {
            'agent_name': 'ReconAgent',
            'user_input': 'Scan the network for open ports',
            'response': 'Found 5 open ports: 22(SSH), 80(HTTP), 443(HTTPS), 3306(MySQL), 5432(PostgreSQL)',
            'success': True,
            'execution_time': 15.2,
            'tools_used': ['nmap', 'masscan']
        },
        {
            'agent_name': 'ExploitAgent',
            'user_input': 'Try to exploit the MySQL service',
            'response': 'Successfully exploited MySQL with CVE-2012-2122 - gained root access',
            'success': True,
            'execution_time': 8.7,
            'tools_used': ['metasploit', 'sqlmap']
        },
        {
            'agent_name': 'ReconAgent',
            'user_input': 'Enumerate users on the compromised system',
            'response': 'Found 15 user accounts, 3 with admin privileges',
            'success': True,
            'execution_time': 12.1,
            'tools_used': ['enum4linux', 'ldapsearch']
        },
        {
            'agent_name': 'PostExploitAgent',
            'user_input': 'Extract sensitive files from the system',
            'response': 'Failed to extract files - permission denied on /etc/shadow',
            'success': False,
            'execution_time': 25.3,
            'tools_used': ['scp', 'tar']
        }
    ]

    # Registrar intera√ß√µes
    integration.start_session("demo_session_001")

    for i, interaction in enumerate(sample_interactions, 1):
        console.print(f"üìù Registrando intera√ß√£o {i}/4...")

        await integration.record_agent_interaction(
            agent_name=interaction['agent_name'],
            user_input=interaction['user_input'],
            agent_response=interaction['response'],
            success=interaction['success'],
            execution_time=interaction['execution_time'],
            tools_used=interaction['tools_used']
        )

    console.print("‚úÖ Intera√ß√µes registradas")

    # 4. An√°lise de Padr√µes
    console.print("\n[bold green]4. An√°lise de Padr√µes Aprendidos[/bold green]")

    try:
        # Analisar sess√£o
        patterns = await engine.analyze_session_patterns("demo_session_001")

        if patterns:
            console.print(f"üéØ Descobertos {len(patterns)} novos padr√µes:")

            table = Table(title="Padr√µes Aprendidos")
            table.add_column("Tipo", style="cyan")
            table.add_column("Descri√ß√£o", style="white")
            table.add_column("Confian√ßa", style="green")
            table.add_column("Sucesso", style="yellow")

            for pattern in patterns:
                table.add_row(
                    pattern.pattern_type,
                    pattern.description[:50] + "..." if len(pattern.description) > 50 else pattern.description,
                    ".1f",
                    ".1f"
                )

            console.print(table)
        else:
            console.print("‚ÑπÔ∏è  Nenhum padr√£o novo descoberto nesta sess√£o")

    except Exception as e:
        console.print(f"‚ùå Erro na an√°lise: {e}")

    # 5. Consulta de Insights
    console.print("\n[bold green]5. Consulta de Insights[/bold green]")

    try:
        # Obter insights para diferentes contextos
        contexts = [
            "network scanning and reconnaissance",
            "database exploitation techniques",
            "privilege escalation methods"
        ]

        for context in contexts:
            insights = await integration.get_learning_insights(context)

            if insights['insights']:
                console.print(f"\nüí° Insights para '{context}':")
                for insight in insights['insights'][:2]:  # Mostrar top 2
                    console.print(f"   ‚Ä¢ {insight['description']}")
                    console.print(".1f"            else:
                console.print(f"   ‚ÑπÔ∏è  Nenhum insight espec√≠fico para '{context}'")

    except Exception as e:
        console.print(f"‚ùå Erro na consulta: {e}")

    # 6. Estat√≠sticas do Sistema
    console.print("\n[bold green]6. Estat√≠sticas do Sistema[/bold green]")

    try:
        stats = engine.get_learning_stats()
        status = integration.get_learning_status()

        console.print("üìà Estat√≠sticas atuais:")
        console.print(f"   ‚Ä¢ Padr√µes totais: {stats['total_patterns']}")
        console.print(f"   ‚Ä¢ Confian√ßa m√©dia: {stats['average_confidence']:.2f}")
        console.print(f"   ‚Ä¢ Taxa de sucesso m√©dia: {stats['average_success_rate']:.2f}")
        console.print(f"   ‚Ä¢ Sess√µes ativas: {stats['active_sessions']}")
        console.print(f"   ‚Ä¢ Sistema habilitado: {status['enabled']}")

        if stats['pattern_types']:
            console.print("   ‚Ä¢ Padr√µes por tipo:")
            for ptype, count in stats['pattern_types'].items():
                console.print(f"     - {ptype}: {count}")

    except Exception as e:
        console.print(f"‚ùå Erro nas estat√≠sticas: {e}")

    # 7. Demonstra√ß√£o de Feedback
    console.print("\n[bold green]7. Demonstra√ß√£o de Feedback[/bold green]")

    try:
        # Adicionar feedback do usu√°rio
        feedback_examples = [
            ("The reconnaissance was very thorough", 5),
            ("Exploit technique worked perfectly", 5),
            ("User enumeration could be faster", 3)
        ]

        for feedback, rating in feedback_examples:
            integration.add_user_feedback(feedback, rating)
            console.print(f"üìù Feedback registrado: '{feedback}' (‚≠ê {rating}/5)")

        console.print("‚úÖ Feedback registrado com sucesso")

    except Exception as e:
        console.print(f"‚ùå Erro no feedback: {e}")

    # 8. Finaliza√ß√£o da Sess√£o
    console.print("\n[bold green]8. Finaliza√ß√£o da Sess√£o[/bold green]")

    try:
        # Finalizar sess√£o e obter resultados
        results = await integration.end_session_and_learn()

        console.print("üèÅ Sess√£o finalizada:")
        console.print(f"   ‚Ä¢ Sess√£o ID: {results['session_id']}")
        console.print(f"   ‚Ä¢ Padr√µes descobertos: {results['patterns_discovered']}")
        console.print(f"   ‚Ä¢ Total de padr√µes: {results['total_patterns']}")
        console.print(f"   ‚Ä¢ Novos padr√µes: {len(results['new_patterns'])}")

        if results['new_patterns']:
            console.print("   ‚Ä¢ Novos padr√µes aprendidos:")
            for pattern in results['new_patterns'][:3]:  # Mostrar top 3
                console.print(f"     - {pattern['type']}: {pattern['description'][:40]}...")

    except Exception as e:
        console.print(f"‚ùå Erro na finaliza√ß√£o: {e}")

    # 9. Resumo Final
    console.print("\n[bold green]9. Resumo da Demonstra√ß√£o[/bold green]")

    final_stats = engine.get_learning_stats()

    summary_panel = Panel(
        f"[bold]Demonstra√ß√£o Conclu√≠da![/bold]\n\n"
        f"üìä [cyan]Padr√µes Totais:[/cyan] {final_stats['total_patterns']}\n"
        f"üéØ [cyan]Confian√ßa M√©dia:[/cyan] {final_stats['average_confidence']:.2f}\n"
        f"‚úÖ [cyan]Taxa de Sucesso:[/cyan] {final_stats['average_success_rate']:.2f}\n"
        f"üîÑ [cyan]Sess√µes Ativas:[/cyan] {final_stats['active_sessions']}\n\n"
        f"[dim]O sistema de aprendizado cont√≠nuo est√° funcionando corretamente "
        f"e aprendendo com cada intera√ß√£o![/dim]",
        title="[bold blue]üéâ Resultado Final[/bold blue]",
        border_style="green"
    )

    console.print(summary_panel)

    # 10. Pr√≥ximos Passos
    console.print("\n[bold yellow]üí° Pr√≥ximos Passos Recomendados:[/bold yellow]")
    console.print("   1. Configure o modelo de aprendizado em learning_config.py")
    console.print("   2. Ajuste os thresholds de confian√ßa conforme necess√°rio")
    console.print("   3. Integre com seus agentes existentes usando EnhancedAgentRunner")
    console.print("   4. Monitore o aprendizado atrav√©s das estat√≠sticas")
    console.print("   5. Adicione feedback regular para melhorar os padr√µes")

    console.print("\n[dim]Para mais informa√ß√µes, consulte learning_guide.md[/dim]")


if __name__ == "__main__":
    # Verificar se estamos em um ambiente adequado
    if not os.path.exists("src/cai/cli"):
        print("Erro: Execute este script do diret√≥rio raiz do projeto CAI")
        exit(1)

    # Executar demonstra√ß√£o
    asyncio.run(main())